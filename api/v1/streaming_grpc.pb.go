// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streaming_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StreamingClient is the client API for Streaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingClient interface {
	ConsumeStream(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (Streaming_ConsumeStreamClient, error)
	ProduceStream(ctx context.Context, opts ...grpc.CallOption) (Streaming_ProduceStreamClient, error)
}

type streamingClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingClient(cc grpc.ClientConnInterface) StreamingClient {
	return &streamingClient{cc}
}

func (c *streamingClient) ConsumeStream(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (Streaming_ConsumeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streaming_serviceDesc.Streams[0], "/streaming.v1.Streaming/ConsumeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingConsumeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_ConsumeStreamClient interface {
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type streamingConsumeStreamClient struct {
	grpc.ClientStream
}

func (x *streamingConsumeStreamClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) ProduceStream(ctx context.Context, opts ...grpc.CallOption) (Streaming_ProduceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streaming_serviceDesc.Streams[1], "/streaming.v1.Streaming/ProduceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingProduceStreamClient{stream}
	return x, nil
}

type Streaming_ProduceStreamClient interface {
	Send(*ProduceRequest) error
	CloseAndRecv() (*ProduceResponse, error)
	grpc.ClientStream
}

type streamingProduceStreamClient struct {
	grpc.ClientStream
}

func (x *streamingProduceStreamClient) Send(m *ProduceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingProduceStreamClient) CloseAndRecv() (*ProduceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProduceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServer is the server API for Streaming service.
// All implementations must embed UnimplementedStreamingServer
// for forward compatibility
type StreamingServer interface {
	ConsumeStream(*ConsumeRequest, Streaming_ConsumeStreamServer) error
	ProduceStream(Streaming_ProduceStreamServer) error
	mustEmbedUnimplementedStreamingServer()
}

// UnimplementedStreamingServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingServer struct {
}

func (UnimplementedStreamingServer) ConsumeStream(*ConsumeRequest, Streaming_ConsumeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeStream not implemented")
}
func (UnimplementedStreamingServer) ProduceStream(Streaming_ProduceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProduceStream not implemented")
}
func (UnimplementedStreamingServer) mustEmbedUnimplementedStreamingServer() {}

// UnsafeStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServer will
// result in compilation errors.
type UnsafeStreamingServer interface {
	mustEmbedUnimplementedStreamingServer()
}

func RegisterStreamingServer(s *grpc.Server, srv StreamingServer) {
	s.RegisterService(&_Streaming_serviceDesc, srv)
}

func _Streaming_ConsumeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).ConsumeStream(m, &streamingConsumeStreamServer{stream})
}

type Streaming_ConsumeStreamServer interface {
	Send(*ConsumeResponse) error
	grpc.ServerStream
}

type streamingConsumeStreamServer struct {
	grpc.ServerStream
}

func (x *streamingConsumeStreamServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Streaming_ProduceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServer).ProduceStream(&streamingProduceStreamServer{stream})
}

type Streaming_ProduceStreamServer interface {
	SendAndClose(*ProduceResponse) error
	Recv() (*ProduceRequest, error)
	grpc.ServerStream
}

type streamingProduceStreamServer struct {
	grpc.ServerStream
}

func (x *streamingProduceStreamServer) SendAndClose(m *ProduceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingProduceStreamServer) Recv() (*ProduceRequest, error) {
	m := new(ProduceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Streaming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.v1.Streaming",
	HandlerType: (*StreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeStream",
			Handler:       _Streaming_ConsumeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProduceStream",
			Handler:       _Streaming_ProduceStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/streaming.proto",
}
